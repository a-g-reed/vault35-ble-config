#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define DEF 0
#define LAY1 1
#define LAY2 2
#define LAY3 3

/ {
    combos {
        compatible = "zmk,combos";
        combo_ESC {
            timeout-ms = <50>;
            key-positions = <0 1 13>;
            bindings = <&kp ESC>;
	};
    	combo_TAB {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp TAB>;
        };
    };
};

/ {
        behaviors {        
                hm: homerow_mods {
            		compatible = "zmk,behavior-hold-tap";
           		label = "HOMEROW_MODS";
           		bindings = <&kp>, <&kp>;

		        #binding-cells = <2>;
		        tapping-term-ms = <200>;
		        quick-tap-ms = <180>;
		        require-prior-idle-ms = <0>;
		        flavor = "tap-preferred";
               };
		ly: layers {
                        compatible = "zmk,behavior-hold-tap";
                        label = "LAYERS TAP HOLD";
                        #binding-cells = <2>;
                        tapping-term-ms = <150>;
                        quick-tap-ms = <0>;
                        flavor = "tap-preferred";
                        bindings = <&mo>, <&to>;
                };
	        /omit-if-no-ref/ sl: sticky_layer {
	            compatible = "zmk,behavior-sticky-key";
	            #binding-cells = <1>;
	            release-after-ms = <1000>;
	            bindings = <&mo>;
	            quick-release;
	            display-name = "Sticky Layer";
		};
		as: auto_shift {
	            compatible = "zmk,behavior-hold-tap";
	            #binding-cells = <2>;
	            tapping_term_ms = <150>;
	            quick_tap_ms = <0>;
	            flavor = "tap-preferred";
	            bindings = <&kp>, <&kp>;
	        };
	};
};

/ {

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
                AS(Q) AS(W) AS(E) AS(R) AS(T) AS(Y) AS(U) AS(I) AS(O) AS(P) AS(BSPC)
                &hm LEFT_CONTROL A   AS(S) AS(D) AS(F) AS(G) AS(H) AS(J) AS(K) AS(L) &hm RIGHT_CONTROL ENTER
                &mt LSHIFT Z           AS(X) AS(C) AS(V) AS(B) AS(N) AS(M) AS(COMMA) AS(PERIOD)  &mt RSHIFT SLASH
                &none       &kp LGUI       &kp LALT         &lt LAY1 SPACE        &kp SPACE        &sl LAY2         &sl LAY3          &none
            >;
        };

        layer_1 {
            bindings = <
                AS(N1) AS(N2) AS(N3) AS(N4) AS(N5) AS(N6) AS(N7) AS(N8) AS(N9) AS(N0) AS(DEL)
                &kp CAPS   &none  AS(SEMI) AS(APOS) AS(NUBS)  &none  &none  AS(MINUS) AS(EQUAL)  &trans
                &trans     &none  &none     &none     &none     &none  &none   AS(LBKT) AS(RBKT)   &trans
                &none      &trans    &trans    &trans    &trans    &trans          &trans      &none
            >;
        };

        layer_2 {
            bindings = <
                &kp GRAVE  &kp F1  &kp F2  &kp F3  &kp F4  &none  &none  &none  &kp UP  &none  &none
                &none      &kp F5  &kp F6  &kp F7  &kp F8  &none  &kp PSCRN   &kp LEFT  &kp RIGHT   &trans        
                &trans     &kp F9  &kp F10  &kp F11  &kp F12  &none    &none   &kp DOWN  &none  &trans
                &none      &trans    &trans    &trans    &trans    &trans          &trans      &none
            >;
        };

        layer_3 {
            bindings = <
                &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none &none &none &kp PG_UP &none &none
                &bt BT_CLR    &out OUT_BLE  &out OUT_USB  &out OUT_TOG  &none         &none &none   &kp HOME  &kp END   &trans        
                &bootloader   &none         &none         &none         &none         &none &none   &kp PG_DN &none &trans
                &none      &trans    &trans    &trans    &trans    &trans          &trans      &none
            >;
        };
    };
};
